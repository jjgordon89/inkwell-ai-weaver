import React, { useState, useMemo, useEffect } from "react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Skeleton } from "@/components/ui/skeleton";
import { Badge } from "@/components/ui/badge";
import { Card } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import LoadingSpinner from "@/components/ui/loading-spinner";
import ProjectStats from "@/components/dashboard/ProjectStats";
import ProjectAnalytics from "@/components/dashboard/ProjectAnalytics";
import QuickActions from "@/components/dashboard/QuickActions";
import { BarChart3, Zap, Grid3X3, Plus, BookOpen, Search } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { useToast } from "@/hooks/use-toast";
import { sanitizeString } from "@/utils/stringUtils";
import { useProjects, useUpdateProject, useDeleteProject } from "@/hooks/queries/projectQueries";
import type { Project } from "@/types/document";
import type { ProjectFilters as ProjectFilterParams } from "@/types/projectTypes";

// Import custom project components
import ProjectHeader from "@/components/projects/ProjectHeader";
import ProjectCard from "@/components/projects/ProjectCard";
import ProjectFilters, { 
  ProjectStatusFilter, 
  ProjectTemplateFilter,
  ProjectSortField,
  ProjectSortOrder
} from "@/components/projects/ProjectFilters";
import ProjectPagination from "@/components/projects/ProjectPagination";
import ProjectEmptyState from "@/components/projects/ProjectEmptyState";
import { ProjectConfirmDialog } from "@/components/projects/ProjectConfirmDialog";

const PROJECTS_PER_PAGE = 9;

const ProjectsPage = () => {
  // Navigation
  const navigate = useNavigate();
  const { toast } = useToast();
  
  // State for project management
  const [searchQuery, setSearchQuery] = useState("");
  const [statusFilter, setStatusFilter] = useState<ProjectStatusFilter>("all");
  const [templateFilter, setTemplateFilter] = useState<ProjectTemplateFilter>("all");
  const [sortField, setSortField] = useState<ProjectSortField>("lastModified");
  const [sortOrder, setSortOrder] = useState<ProjectSortOrder>("desc");
  const [currentPage, setCurrentPage] = useState(1);
  const [deleteId, setDeleteId] = useState<string | null>(null);
  const [archiveId, setArchiveId] = useState<string | null>(null);

  // Create filter object for projects query
  const filters = useMemo(() => {
    const result: ProjectFilterParams = {};
    if (searchQuery && searchQuery.trim() !== '') {
      result.searchTerm = sanitizeString(searchQuery.trim());
    }
    if (statusFilter && statusFilter !== 'all') {
      result.status = statusFilter as any; // Type cast for compatibility
    }
    if (sortField) {
      result.sortBy = sortField as any; // Type cast for compatibility
    }
    if (sortOrder) {
      result.sortOrder = sortOrder;
    }
    return result;
  }, [searchQuery, statusFilter, sortField, sortOrder]);

  // TanStack Query hooks
  const projectsQuery = useProjects(filters);
  const updateProjectMutation = useUpdateProject();
  const deleteProjectMutation = useDeleteProject();
  
  // Derived state
  const isLoading = projectsQuery.isLoading || updateProjectMutation.isPending || deleteProjectMutation.isPending;
  const projects = useMemo(() => projectsQuery.data || [], [projectsQuery.data]);

  // Show error toast if there's an error in the query
  useEffect(() => {
    if (projectsQuery.error) {
      toast({
        title: "Error",
        description: `Failed to load projects: ${(projectsQuery.error as Error).message}`,
        variant: "destructive",
      });
    }
  }, [projectsQuery.error, toast]);

  // Pagination logic
  const totalPages = Math.ceil(projects.length / PROJECTS_PER_PAGE);
  const paginatedProjects = useMemo(() => {
    const start = (currentPage - 1) * PROJECTS_PER_PAGE;
    return projects.slice(start, start + PROJECTS_PER_PAGE);
  }, [projects, currentPage]);

  // Reset to first page if filter/search changes
  useEffect(() => {
    if (currentPage > Math.max(1, totalPages)) {
      setCurrentPage(1);
    }
  }, [projects, totalPages, currentPage]);

  // UI Event Handlers
  const handleSearchChange = (query: string) => {
    setSearchQuery(query);
    setCurrentPage(1); // Reset to first page on search
  };
  
  const handleStatusFilterChange = (status: ProjectStatusFilter) => {
    setStatusFilter(status);
    setCurrentPage(1); // Reset to first page on filter change
  };
  
  const handleTemplateFilterChange = (template: ProjectTemplateFilter) => {
    setTemplateFilter(template);
    setCurrentPage(1); // Reset to first page on filter change
  };
  
  const handleSortChange = (field: ProjectSortField, order: ProjectSortOrder) => {
    setSortField(field);
    setSortOrder(order);
  };

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };

  const handleDeleteConfirm = async () => {
    if (!deleteId) return;
    
    try {
      await deleteProjectMutation.mutateAsync({ id: deleteId });
      setDeleteId(null);
      toast({
        title: "Success",
        description: "Project deleted successfully",
        variant: "default",
      });
    } catch (error) {
      console.error("Error deleting project:", error);
      toast({
        title: "Error",
        description: `Failed to delete project: ${(error as Error).message}`,
        variant: "destructive",
      });
    }
  };
  
  const handleArchiveConfirm = async () => {
    if (!archiveId) return;
    
    try {
      await updateProjectMutation.mutateAsync({ 
        id: archiveId, 
        data: { status: "archived" } 
      });
      setArchiveId(null);
      toast({
        title: "Success",
        description: "Project archived successfully",
        variant: "default",
      });
    } catch (error) {
      console.error("Error archiving project:", error);
      toast({
        title: "Error",
        description: `Failed to archive project: ${(error as Error).message}`,
        variant: "destructive",
      });
    }
  };

  const handleCardAction = (action: 'edit' | 'delete' | 'archive', id: string) => {
    switch (action) {
      case 'edit':
        navigate(`/studio/${id}`);
        break;
      case 'delete':
        setDeleteId(id);
        break;
      case 'archive':
        setArchiveId(id);
        break;
    }
  };

  // Render loading state
  if (isLoading && projects.length === 0) {
    return (
      <div className="container max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
        <div className="mb-8">
          <Skeleton className="h-12 w-3/4 mb-2" />
          <Skeleton className="h-6 w-1/2" />
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {Array.from({ length: 6 }).map((_, i) => (
            <Skeleton key={i} className="h-64 rounded-lg" />
          ))}
        </div>
      </div>
    );
  }

  // Get available templates from projects for filtering
  const availableTemplates = useMemo(() => {
    const templates = new Set<string>();
    projects.forEach(project => {
      if (project.template) {
        templates.add(project.template);
      }
    });
    return Array.from(templates);
  }, [projects]);

  return (
    <div className="container max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
      <ProjectHeader 
        title="Projects" 
        description="Manage your writing projects" 
      />
      
      <Tabs defaultValue="projects" className="mt-6">
        <TabsList className="mb-6">
          <TabsTrigger value="projects" className="flex items-center">
            <Grid3X3 className="mr-2 h-4 w-4" />
            Projects
          </TabsTrigger>
          <TabsTrigger value="stats" className="flex items-center">
            <BarChart3 className="mr-2 h-4 w-4" />
            Stats
          </TabsTrigger>
          <TabsTrigger value="actions" className="flex items-center">
            <Zap className="mr-2 h-4 w-4" />
            Quick Actions
          </TabsTrigger>
        </TabsList>
        
        <TabsContent value="projects" className="mt-6">
          <div className="mb-6">
            <ProjectFilters
              searchQuery={searchQuery}
              onSearchChange={handleSearchChange}
              statusFilter={statusFilter}
              onStatusFilterChange={handleStatusFilterChange}
              templateFilter={templateFilter}
              onTemplateFilterChange={handleTemplateFilterChange}
              sortField={sortField}
              sortOrder={sortOrder}
              onSortChange={handleSortChange}
              availableTemplates={availableTemplates}
              className="w-full"
            />
          </div>
          
          {projects.length === 0 ? (
            <ProjectEmptyState
              hasFilters={!!searchQuery || statusFilter !== 'all' || templateFilter !== 'all'}
              onCreateNew={() => navigate('/projects/new')}
            />
          ) : (
            <>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {paginatedProjects.map((project) => (
                  <ProjectCard
                    key={project.id}
                    id={project.id}
                    title={project.name}
                    description={project.description}
                    status={project.status as any}
                    wordCount={project.wordCount || 0}
                    lastModified={new Date(project.lastModified)}
                    createdAt={new Date(project.createdAt)}
                    template={project.template}
                    onEdit={(id) => navigate(`/studio/${id}`)}
                    onDelete={(id) => setDeleteId(id)}
                    onArchive={(id) => setArchiveId(id)}
                  />
                ))}
              </div>
              
              {totalPages > 1 && (
                <div className="mt-8">
                  <ProjectPagination
                    currentPage={currentPage}
                    totalPages={totalPages}
                    onPageChange={handlePageChange}
                  />
                </div>
              )}
            </>
          )}
        </TabsContent>
        
        <TabsContent value="stats" className="mt-6">
          <ProjectStats projects={projects} />
        </TabsContent>
        
        <TabsContent value="actions" className="mt-6">
          <QuickActions projects={projects} />
        </TabsContent>
      </Tabs>
      
      {/* Delete Confirmation Dialog */}
      <ProjectConfirmDialog
        open={deleteId !== null}
        onOpenChange={(open) => !open && setDeleteId(null)}
        onConfirm={handleDeleteConfirm}
        title="Delete Project"
        description="This will permanently delete this project and all its data. This action cannot be undone."
        confirmLabel="Delete"
        cancelLabel="Cancel"
        destructive={true}
      />
      
      {/* Archive Confirmation Dialog */}
      <ProjectConfirmDialog
        open={archiveId !== null}
        onOpenChange={(open) => !open && setArchiveId(null)}
        onConfirm={handleArchiveConfirm}
        title="Archive Project"
        description="This will archive the project. You can restore it later from the archive."
        confirmLabel="Archive"
        cancelLabel="Cancel"
      />
    </div>
  );
};

export default ProjectsPage;
